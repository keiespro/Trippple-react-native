apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [

        bundleAssetName: "index.android.bundle",
        entryFile: "index.android.js",
        bundleInDebug: false,
        bundleInRelease: true,
        root: "../../",
        jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
        jsBundleDirRelease: "$buildDir/intermediates/assets/release",
        resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
        resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
        inputExcludes: ["android", "ios"],
        nodeExecutableAndArgs: ["node"]

];

apply from: "../../node_modules/react-native/react.gradle"
apply plugin: 'io.fabric'

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "co.trippple"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 2
        versionName "2.6.0"
        multiDexEnabled true

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
       release {
           storeFile file(MYAPP_RELEASE_STORE_FILE)
           storePassword MYAPP_RELEASE_STORE_PASSWORD
           keyAlias MYAPP_RELEASE_KEY_ALIAS
           keyPassword MYAPP_RELEASE_KEY_PASSWORD
       }
   }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

configurations {
    all*.exclude group: 'com.google.android.gms', module: 'play-services-ads'
}


dependencies {
    compile 'com.android.support:multidex:1.0.1'
    compile project(':rn-firebase-bridge')
    compile project(':react-native-splash-screen')
    compile project(':react-native-keychain')
    compile project(':react-native-firebase3')
    // For WebP support, including animated WebP
    // For WebP support, without animations
    compile 'com.facebook.fresco:webpsupport:0.11.0'
    compile project(':react-native-push-notification')
    compile project(':react-native-mixpanel')
    compile project(':react-native-mail')
    compile project(':react-native-google-analytics-bridge')
    compile project(':react-native-hotline')
    compile project(':react-native-fs')
    compile project(':react-native-fbsdk')
    compile project(':react-native-device-info')
    compile project(':react-native-contacts')
    compile project(':react-native-camera')
    compile project(':react-native-blur')
    compile project(':ospermissions')
    compile project(':react-native-fcm')

    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.10@aar') {
        transitive = true;
    }
    compile 'com.facebook.android:facebook-android-sdk:4.+'
    compile ('com.facebook.android:audience-network-sdk:4.+'){
      exclude group: 'com.google.android.gms'
    }
    compile ('com.facebook.android:account-kit-sdk:4.+'){
      exclude group: 'com.google.android.gms'
    }
    compile 'com.facebook.fresco:animated-gif:0.11.0'
    compile 'com.facebook.fresco:animated-webp:0.11.0'
    compile 'com.facebook.fresco:webpsupport:0.11.0'
    compile 'com.fivehundredpx:blurringview:1.0.0'
    compile 'com.google.firebase:firebase-messaging:9.8.0'
    compile 'com.google.firebase:firebase-auth:9.8.0'
    compile 'com.google.firebase:firebase-database:9.8.0'


}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

 apply plugin: 'com.google.gms.google-services'
